[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "fl-fog"
version = "0.1.0"
description = "Fog computing layer for federated learning in continuum environments"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "FL-Fog Development Team"},
]
keywords = ["federated-learning", "fog-computing", "continuum-computing", "edge-ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
]

dependencies = [
    "torch>=1.9.0",
    "numpy>=1.21.0",
    "pyyaml>=5.4.0",
    "asyncio-mqtt>=0.11.0",
    "paho-mqtt>=1.6.0",
    "aiohttp>=3.8.0",
    "grpcio>=1.44.0",
    "grpcio-tools>=1.44.0",
    "protobuf>=3.19.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "psutil>=5.8.0",
    "prometheus-client>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-asyncio>=0.18.0",
    "coverage>=5.5.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "isort>=5.9.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "sphinx-autodoc-typehints>=1.12.0",
]

[project.urls]
"Homepage" = "https://github.com/your-org/fl-fog"
"Documentation" = "https://fl-fog.readthedocs.io/"
"Repository" = "https://github.com/your-org/fl-fog.git"
"Bug Tracker" = "https://github.com/your-org/fl-fog/issues"

[project.scripts]
fl-fog = "fog_node:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["fog_node*", "communication*", "config*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fog_node", "communication"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["fog_node", "communication"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
